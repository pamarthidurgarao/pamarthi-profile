@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  body {
    @apply bg-background text-foreground;
  }
}

.typing-demo {
  width: 22ch;
  animation: typing 2s steps(22), blink .5s step-end infinite alternate;
  white-space: nowrap;
  overflow: hidden;
  border-right: 3px solid;
}

.nav-link {
  @apply relative text-foreground hover:text-primary transition-colors duration-300;
}

.nav-link::after {
  @apply content-[''] absolute left-0 -bottom-2 w-0 h-0.5 bg-primary transition-all duration-300;
}

.nav-link:hover::after {
  @apply w-full;
}

.project-card {
  @apply relative overflow-hidden rounded-lg transition-all duration-500;
}

.project-card:hover img {
  @apply scale-110;
}

.project-card img {
  @apply transition-all duration-500;
}

.project-overlay {
  @apply absolute inset-0 bg-black/80 flex items-center justify-center opacity-0 transition-opacity duration-300;
}

.project-card:hover .project-overlay {
  @apply opacity-100;
}

/* Scroll animations */
.animate-on-scroll {
  opacity: 0;
  transform: translateY(20px);
  transition: all 0.6s ease-out;
}

.animate-on-scroll.visible {
  opacity: 1;
  transform: translateY(0);
}

/* Skills animations */
.skill-card {
  @apply hover:transform hover:-translate-y-2 hover:shadow-lg transition-all duration-300;
}

.skill-progress circle {
  transition: stroke-dashoffset 1s ease-in-out;
}

/* Add this script to handle scroll animations */
@script {
  const observerOptions = {
    root: null,
    rootMargin: '0px',
    threshold: 0.1
  };

  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        entry.target.classList.add('visible');
      }
    });
  }, observerOptions);

  document.querySelectorAll('.animate-on-scroll').forEach((element) => {
    observer.observe(element);
  });
}